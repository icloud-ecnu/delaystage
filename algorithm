#include <bits/stdc++.h>

using namespace std;


int main()
{
    map<int,int> stagesPair;
    char file_title[100];
    int file_num=1;
    sprintf(file_title, "read_file\\%d.txt", file_num);
    int num1,num2;
	FILE *fq=fopen(file_title,"r");
	int sum_line=0;
    while (!feof(fq))
	{
	    fscanf(fq,"%d %d\n",&num1,&num2);
	    stagesPair.insert(pair<int,int> (num1,num2));
        sum_line++;
	}
	fclose(fq);
    //worker
    float bandwidth;
    float executors;
    float disk[];
    float comRate[];
    float stagesTime[];
    float stagesTransformData[];
    vector<bool>flag(stagesTime.size(),false);

    vector<int> stages;
    vector<vector<int> > execution_path;
    vector<float> path_time;

    map<int,int> mp;
    int n=sum_line;
    vector<int>in(n+1,0);
    for(int i=0;i<n-1;i++){
        mp[stagesPair[i][0]]=stagesPair[i][1];
        in[stagesPair[i][1]]++;
    }

    int parallelLast_=n;
    for(int i=n;i>0;i--){
        if(in[i]!=1){parallelLast_=i;break;}
    }
    cout<<parallelLast_<<endl;

    int num_path_=0;
    for(int i=1;i<=n;i++){
        vector<int>res;
        if(in[i]==0){
            res.push_back(i);
            int j=i;
            while(mp[j]!=0){
                res.push_back(mp[j]);
                j=mp[j];
            }
            execution_path.push_back(res);
            float time=0.0;
            for(int k=0;k<res.size();k++) time+=stagesTime[res[k]];
            path_time.push_back(time);
            num_path_++;
        }
    }

    //execution paths
    //cout<<num_path_<<endl;
    float maxTime=0.0;
    int maxPathNum=0;
    for(int i=0;i<num_path_;i++){
        for(int j=0;j<execution_path[i].size();j++)
            cout<<execution_path[i][j]<<" ";
        cout<<"time: "<<path_time[i]<<" ";
        if(maxTime<path_time[i]) {maxTime=path_time[i]; maxPathNum=i;}
        cout<<endl;
    }

    cout<<maxPathNum<<endl;
    vector<vector<int> > result;
    vector<int> resultPath;
    //cout<<execution_path[maxPathNum].size();
    for(int i=0;i<execution_path[maxPathNum].size();i++){
        int stageId=execution_path[maxPathNum][i];
        flag[stageId]=true;
        //cout<<"stageId: "<<stageId<<endl;
        resultPath.push_back(stageId);
        int beforeStage=0;
        if(i!=0) beforeStage=result[i-1][3];
        cout<<"beforeStage: "<<beforeStage<<endl;
        resultPath.push_back(beforeStage);
        //cout<<"result[i][1]:"<<resultPath[1]<<endl;
        resultPath.push_back(stagesTransformData[stageId]/bandwidth + resultPath[1]);
        resultPath.push_back(executors*comRate[stageId]+resultPath[2]);
        result.push_back(resultPath);
        resultPath.clear();
    }

    /*for(int i=0;i<result.size();i++){
        for(int j=0;j<result[0].size();j++)
            cout<<result[i][j]<<" ";
        cout<<endl;
    }*/

    for(int i=0;i<execution_path.size();i++){
        if(i==maxPathNum) continue;
        for(int k=0;k<maxTime;k++){
            for(int j=0;j<execution_path[i].size();j++){
                int stageId=execution_path[i][j];
                if(flag[stageId]==true) continue;
                resultPath.push_back(stageId);
                int beforeStage=0;
                if(j!=0) beforeStage=result[j-1][3];
                resultPath.push_back(beforeStage);
                resultPath.push_back(stagesTransformData[stageId]/bandwidth + resultPath[1]);
                resultPath.push_back(executors*comRate[stageId]+resultPath[2]);
                result.push_back(resultPath);
                resultPath.clear();
            }
        }
    }

    cout<<"=================="<<endl;
    for(int i=0;i<result.size();i++){
        for(int j=0;j<result[0].size();j++)
            cout<<result[i][j]<<" ";
        cout<<endl;
    }
    cout<<maxTime;
    return 0;
}
