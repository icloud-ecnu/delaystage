#include <bits/stdc++.h>
using namespace std;

int main()
{
    vector<vector<int> > stagesPair;
    char file_title[100];
    int file_num=1;
    sprintf(file_title, "read_file\\%d.txt", file_num);
    int num1,num2;
	FILE *fq=fopen(file_title,"r");
	int sum_line=0;
    while (!feof(fq))
	{
	    fscanf(fq,"%d %d\n",&num1,&num2);
	    vector<int> temp;
	    temp.push_back(num1);
	    temp.push_back(num2);
	    stagesPair.push_back(temp);
        sum_line++;
	}
    fclose(fq);


    vector<int> stagesTime;
    vector<int> stagesTraTime;
    vector<int> stagesExeTime;
    vector<int> stagesDiskTime;
    char profile_job[100];
    sprintf(profile_job, "profile\\%d.txt", file_num);
    int m1,m2,m3,m4;
	FILE *fq2=fopen(profile_job,"r");
    while (!feof(fq2))
	{
	    fscanf(fq2,"%d %d %d %d\n",&m1,&m2,&m3,&m4);
		cout<<m1<<" "<<m2<<" "<<m3<<" "<<m4<<endl;
		stagesTime.push_back(m1);
		stagesTraTime.push_back(m2);
		stagesExeTime.push_back(m3);
		stagesDiskTime.push_back(m4);
	}
	fclose(fq2);
    int n=stagesPair.size();

    vector<bool>flag(n+1,false);
    vector<vector<int> > execution_path; //execution paths
    vector<float> path_time; //execution path time
    map<int,int> mp_out; //stage dependence
    vector<int>in_stage(n+1,0); //number of stage's children

    for(int i=0;i<n-1;i++){
        mp_out[stagesPair[i][0]]=stagesPair[i][1];
        //mp_in[stagePair[i][1]]=stagesPair[i][0];
        in_stage[stagesPair[i][1]]++;
    }

    int parallelLast_=n;
    for(int i=n;i>0;i--){
        if(in_stage[i]!=1){parallelLast_=i;break;}
    }

    int num_path_=0;
    for(int i=1;i<=n;i++){
        vector<int>res;
        if(in_stage[i]==0){
            res.push_back(i);
            int j=i;
            while(mp_out[j]!=0){
                res.push_back(mp_out[j]);
                j=mp_out[j];
            }
            execution_path.push_back(res);
            float time=0.0;
            for(int k=0;k<res.size();k++) time+=stagesTime[res[k]];
            path_time.push_back(time);
            num_path_++;
        }
    }

    //execution paths
    float maxTime=0.0;
    int maxPathNum=0;
    for(int i=0;i<num_path_;i++){
        for(int j=0;j<execution_path[i].size();j++)
            cout<<execution_path[i][j]<<" ";
        cout<<"time: "<<path_time[i]<<" ";
        if(maxTime<path_time[i]) {maxTime=path_time[i]; maxPathNum=i;}
        cout<<endl;
    }
    cout<<maxPathNum<<endl;

    set<int> tempSet;
    map<int,set<int> > traTimePath;
    map<int,set<int> > exeTimePath;


    int t=0;//start time
    for(int i=0;i<execution_path[maxPathNum].size();i++){
        int stageId=execution_path[maxPathNum][i];
        flag[stageId]=true;
        set<int> traSetTime;
        set<int> exeSetTime;
        int j;
        for(j=1;j<=stagesTraTime[stageId];j++) {
            traSetTime.insert(j+t);
        }
        traTimePath[stageId]=traSetTime;
        t=t+j-1;
        for(j=1;j<=stagesExeTime[stageId];j++){
            exeSetTime.insert(j+t);
        }
        exeTimePath[stageId]=exeSetTime;
        t=t+j-1;
        traSetTime.clear();
        exeSetTime.clear();
    }

    for(int i=1;i<execution_path.size();i++){
        int lower=0;
        for(int j=0;j<execution_path[i].size();j++){
            int stageId=execution_path[i][j];
            if(flag[stageId]==true) continue;
            int k=j;
            for(;k<execution_path[i].size();k++){
                if(in_stage[execution_path[i][k]]>=2) break;
            }
            int upper=*traTimePath[execution_path[i][k]].begin()-stagesTime[stageId]-1;
            int time=100;
            int beginTime=0;
            set<int> tempTraSetTime;
            set<int> tempExeSetTime;
            for(int p=lower;p<=upper;p++){
                int t=p;
                set<int> traSetTime;
                set<int> exeSetTime;
                int m;
                for(m=1;m<=stagesTraTime[stageId];m++) {
                    traSetTime.insert(m+t);
                }
                //traTimePath[stageId]=traSetTime;
                t=t+m-1;
                for(m=1;m<=stagesExeTime[stageId];m++){
                    exeSetTime.insert(m+t);
                }

                int timeTemp=0;
                for(set<int>::iterator it=traSetTime.begin();it!=traSetTime.end();it++){
                    for(int q1=0;q1<i;q1++){
                        for(int q2=0;q2<execution_path[q1].size();q2++){
                            int beforeStage=execution_path[q1][q2];
                            if(traTimePath[beforeStage].find(*it)!=traTimePath[beforeStage].end()) timeTemp++;
                        }
                    }
                }

                for(set<int>::iterator it=exeSetTime.begin();it!=exeSetTime.end();it++){
                    for(int q1=0;q1<i;q1++){
                        for(int q2=0;q2<execution_path[q1].size();q2++){
                            int beforeStage=execution_path[q1][q2];
                            if(exeTimePath[beforeStage].find(*it)!=exeTimePath[beforeStage].end()) timeTemp++;
                        }
                    }
                }
                if(time>timeTemp){
                    cout<<"time: "<<timeTemp<<endl;
                    time=timeTemp;
                    beginTime=p;
                    tempTraSetTime.clear();
                    tempTraSetTime.insert(traSetTime.begin(),traSetTime.end());
                    tempExeSetTime.clear();
                    tempExeSetTime.insert(exeSetTime.begin(),exeSetTime.end());
                }
            }
            traTimePath[stageId]=tempTraSetTime;
            exeTimePath[stageId]=tempExeSetTime;
            lower=*tempExeSetTime.end();
            flag[stageId]=true;
        }
    }



    cout<<"________________________"<<endl;

    for(int i=0;i<traTimePath.size();i++){
        cout<<i<<": "<<endl;
        for(set<int>::iterator it=traTimePath[i].begin();it!=traTimePath[i].end();it++)
            cout<<*it<<" ";
        cout<<endl;
    }
    for(int i=0;i<exeTimePath.size();i++){
        cout<<i<<": "<<endl;
        for(set<int>::iterator it=exeTimePath[i].begin();it!=exeTimePath[i].end();it++)
            cout<<*it<<" ";
        cout<<endl;
    }

    int sumTime=0;
    for(int i=0;i<execution_path[0].size();i++){

        int stageId=execution_path[0][i];
        sumTime+=stagesTime[stageId];
        int timeTemp=0;

        for(set<int>::iterator it=traTimePath[stageId].begin();it!=traTimePath[stageId].end();it++){
            for(int q1=1;q1<execution_path.size();q1++){
                for(int q2=0;q2<execution_path[q1].size();q2++){
                    int beforeStage=execution_path[q1][q2];
                    if(beforeStage==stageId) break;
                    if(traTimePath[beforeStage].find(*it)!=traTimePath[beforeStage].end()) timeTemp++;
                }
            }
        }

        for(set<int>::iterator it=exeTimePath[stageId].begin();it!=exeTimePath[stageId].end();it++){
            for(int q1=1;q1<execution_path.size();q1++){
                for(int q2=0;q2<execution_path[q1].size();q2++){
                    int beforeStage=execution_path[q1][q2];
                    if(beforeStage==stageId) break;
                    if(exeTimePath[beforeStage].find(*it)!=exeTimePath[beforeStage].end()) timeTemp++;
                }
            }
        }
        sumTime+=timeTemp;
    }

    cout<<sumTime<<endl;
    return 0;
}
